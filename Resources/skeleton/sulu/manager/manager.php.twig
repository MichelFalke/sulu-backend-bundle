<?php

{% block namespace %}
namespace {{ namespace }}\Manager{{ entity_namespace ? '\\' ~ entity_namespace : '' }};
{% endblock %}

{% block use %}
{% if extended %}
use Doctrine\ORM\EntityManagerInterface;
{% endif %}
use {{ namespace }}\Entity\{{ entity }};
{% if extended %}
use {{ metadata.customRepositoryClassName }};
{% else %}
use L91\Sulu\Bundle\BackendBundle\Manager\AbstractBackendManager;
{% endif %}
{% endblock %}

{% block class_annotations %}
/**
 * {% include 'sulu/comment.twig' %}

 */
{% endblock %}
{% block class_definition %}
class {{ entity }}Manager{% if not extended %} extends AbstractBackendManager{% endif %}
{% endblock class_definition %}

{
{% if extended %}
{% block var_entity_manager %}
    /**
     * @var EntityManagerInterface
     */
    protected $entityManager;
{% endblock %}

{% block var_repository %}
    /**
     * @var {{ entity }}Repository
     */
    protected $repository;
{% endblock %}

{% block constructor %}
    /**
     * EventManager constructor.
     *
     * @param EntityManagerInterface $entityManager
     * @param {{ entity }}Repository ${{ entity|camelize }}Repository
     */
    public function __construct(
        EntityManagerInterface $entityManager,
        {{ entity }}Repository ${{ entity|camelize }}Repository
    ) {
        $this->entityManager = $entityManager;
        $this->{{ entity|camelize }}Repository = ${{ entity|camelize }}Repository;
    }
{% endblock %}

{% block find_by_id %}
    /**
     * {@inheritdoc}
     */
    public function findById($id, $locale = null)
    {
        return $this->repository->findById($id, $locale);
    }
{% endblock %}

{% block find_all %}
    /**
     * {@inheritdoc}
     */
    public function findAll($locale = null, $filters = [])
    {
        return $this->repository->findAll($locale, $filters);
    }
{% endblock %}

{% block count %}
    /**
     * {@inheritdoc}
     */
    public function count($locale = null, $filters = [])
    {
        return $this->repository->count($locale, $filters);
    }
{% endblock %}

{% endif %}
{% block save %}
    /**
     * {@inheritdoc}
     */
    public function save($data, $locale = null, $id = null)
    {
        // find exist or create new entity
        if (!$id) {
            ${{ entity|camelize }} = new {{ entity }}();
        } else {
            ${{ entity|camelize }} = $this->findById($id, $locale);
        }

{% for field in metadata.fieldNames if metadata.singleIdentifierFieldName != field %}
{% spaceless %}
    {% set default = '' %}
    {% if not metadata.fieldMappings[field]['nullable']|default(false) %}
        {% if metadata.typeOfField(field) in ['date', 'datetime'] %}
            {% set default = ', new \\DateTime(), \'date\'' %}
        {% elseif  metadata.typeOfField(field) in ['integer', 'float', 'double', 'decimal'] %}
            {% set default = ', 0' %}
        {% else %}
            {% set default = ', \'\'' %}
        {% endif %}
    {% else %}
        {% if metadata.typeOfField(field) in ['date', 'datetime'] %}
            {% set default = ', null, \'date\'' %}
        {% endif %}
    {% endif %}
{% endspaceless %}
        // {{ field }}
        ${{ entity|camelize }}->set{{ field[:1]|upper ~ field[1:] }}(self::getValue($data, '{{ field }}'{{ default }}));

{% endfor %}
        $this->entityManager->persist(${{ entity|camelize }});
        $this->entityManager->flush();

        if (!$id) {
            // to avoid lazy load of sub entities in the serializer reload whole object with sub entities from db
            // remove this when you don`t join anything in `findById`
            ${{ entity|camelize }} = $this->findById(${{ entity|camelize }}->get{{ metadata.singleIdentifierFieldName|capitalize }}(), $locale);
        }

        return ${{ entity|camelize }};
    }
{% endblock %}
{% if extended %}

{% block delete %}
    /**
     * {@inheritdoc}
     */
    public function delete($id, $locale = null)
    {
        $object = $this->findById($id, $locale);

        if (!$object) {
            return null;
        }

        $this->entityManager->remove($object);
        $this->entityManager->flush();

        return $object;
    }
{% endblock %}

{% block get_value %}
    /**
     * @param $data
     * @param $value
     * @param null $default
     * @param string $type
     *
     * @return mixed
     */
    protected static function getValue($data, $value, $default = null, $type = null)
    {
        if (isset($data[$value])) {
            if ($type === 'date') {
                if (!$data[$value]) {
                    return $default;
                }

                return new \DateTime($data[$value]);
            }

            return $data[$value];
        }

        return $default;
    }
{% endblock %}
{% endif %}
}
